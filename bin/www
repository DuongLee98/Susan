#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');
const speech = require('@google-cloud/speech');
const textToSpeech = require('@google-cloud/text-to-speech');
const fs = require('fs');
const util = require('util');

const spclient = new speech.SpeechClient();







/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);
var ss = require('socket.io-stream');

io.on('connection', client => {
    console.log('Client Connected to server');
    let recognizeStream = null;

    client.on('join', function (data) {
      client.emit('messages', 'Socket Connected to Server');
    });

    client.on('messages', function (data) {
      client.emit('broad', data);
    });

    client.on('startGoogleCloudStream', function (data) {
      startRecognitionStream(this, data);
    });

    client.on('endGoogleCloudStream', function (data) {
      stopRecognitionStream();
    });

    client.on('binaryData', function (data) {
      // console.log(data); //log binary data
      if (recognizeStream !== null) {
          recognizeStream.write(data);
      }
    });

    client.on('playaudio', function (txt) {
        tts(client, txt)
    });



  console.log("New Client Connected");
  function startRecognitionStream(client, data) {
        recognizeStream = spclient.streamingRecognize(request)
            .on('error', console.error)
            .on('data', (data) => {
                process.stdout.write(
                    (data.results[0] && data.results[0].alternatives[0])
                        ? `Transcription: ${data.results[0].alternatives[0].transcript}\n`
                        : `\n\nReached transcription time limit, press Ctrl+C\n`);
                client.emit('speechData', data);

                // if end of utterance, let's restart stream
                // this is a small hack. After 65 seconds of silence, the stream will still throw an error for speech length limit
                if (data.results[0] && data.results[0].isFinal) {
                    stopRecognitionStream();
                    startRecognitionStream(client);
                    // console.log('restarted stream serverside');
                }
            });
    }

    function stopRecognitionStream() {
        if (recognizeStream) {
            recognizeStream.end();
        }
        recognizeStream = null;
    }

    async function tts(socket, txt) {
        const client = new textToSpeech.TextToSpeechClient();

        // The text to synthesize
        const text = txt;

        // Construct the request
        const request = {
          input: {text: text},
          // Select the language and SSML Voice Gender (optional)
          voice: {languageCode: 'vi-VN', ssmlGender: 'NEUTRAL'},
          // Select the type of audio encoding
          audioConfig: {audioEncoding: 'MP3'},
        };

        // Performs the Text-to-Speech request
        const [response] = await client.synthesizeSpeech(request);

        const writeFile = util.promisify(fs.writeFile);
        await writeFile('output.mp3', response.audioContent, 'binary');
        console.log('Audio content written to file: output.mp3');
        var stream = ss.createStream();
        var filename = 'output.mp3';
        ss(socket).emit('audio-stream', stream, { name: filename });
        fs.createReadStream(filename).pipe(stream);
    }
});

const encoding = 'LINEAR16';
const sampleRateHertz = 16000;
const languageCode = 'vi-VN';
const model = 'phone_call';
const request = {
  config: {
    encoding: encoding,
    sampleRateHertz: sampleRateHertz,
    languageCode: languageCode
    // useEnhanced: true,
    // model: model
  },
  interimResults: false, // If you want interim results, set this to true
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
